#include "Header/Shader.h"
#include <fstream>

Shader::Shader()
{
	m_pProgram = NULL;
	m_vertex = 0;
	m_fragment = 0;
	m_geometry = 0;
}

Shader::~Shader()
{

}

bool Shader::init(GLint* p_pProgram)
{
	m_pProgram = p_pProgram;
	if(m_pProgram == NULL)
		return false;
	return true;
}

bool Shader::createAndCompile(ShaderType p_shaderType, const char* p_pFilecAddress)
{
	std::string shaderCode;
	std::ifstream shaderStream(p_pFilecAddress,std::ios::in);
	if(shaderStream.is_open())
	{
		std::string Line = "";
		while(getline(shaderStream, Line))
			shaderCode += "\n" + Line;
		shaderStream.close();
	}

	const char* sourceVersion = shaderCode.c_str();
	GLint lengthVersion = shaderCode.length();

	switch (p_shaderType)
	{
	case VERTEX_SHADER:
		m_vertex = glCreateShader(GL_VERTEX_SHADER);
		glShaderSource(m_vertex,1, &sourceVersion, &lengthVersion);
		glCompileShader(m_vertex);
		errorCheckShader(&m_vertex);
		break;
	case FRAGMENT_SHADER:
		m_fragment = glCreateShader(GL_FRAGMENT_SHADER);
		glShaderSource(m_fragment,1, &sourceVersion, &lengthVersion);
		glCompileShader(m_fragment);
		errorCheckShader(&m_fragment);
		break;
	case GEOMETRY_SHADER:
		break;
	default:
		break;
	}

	return true;
}

void Shader::attachAndLink()
{
	if(m_vertex != 0)
		glAttachShader(*m_pProgram, m_vertex);
	if(m_fragment != 0)
		glAttachShader(*m_pProgram, m_fragment);
	if(m_geometry != 0)
		glAttachShader(*m_pProgram, m_geometry);

	glLinkProgram(*m_pProgram);

	GLint checkErr;
	glGetProgramiv(*m_pProgram, GL_LINK_STATUS, &checkErr);
	if(checkErr == GL_FALSE)
	{
		fprintf(stderr, "Program link failure \n");
	}
}


void Shader::errorCheckShader(GLuint* p_pShader)
{
	GLint status;
	glGetShaderiv(p_pShader, GL_COMPILE_STATUS, &status);
	if (status == GL_FALSE)
	{
		GLint infoLogLength;
		glGetShaderiv(p_pShader, GL_INFO_LOG_LENGTH, &infoLogLength);

		GLchar *strInfoLog = new GLchar[infoLogLength + 1];
		glGetShaderInfoLog(p_pShader, infoLogLength, NULL, strInfoLog);

		const char *strShaderType = NULL;
		strShaderType = "vertex";


		fprintf(stderr, "Compile failure in %s shader:\n%s\n", strShaderType, strInfoLog);
		delete[] strInfoLog;
	}
}
