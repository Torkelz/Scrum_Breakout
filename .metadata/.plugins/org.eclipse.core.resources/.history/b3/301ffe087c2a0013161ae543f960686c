#include "Header/Shader.h"
#include <fstream>

Shader::Shader()
{
	m_pProgram = NULL;
	m_vertex = 0;
	m_fragment = 0;
	m_geometry = 0;
}

Shader::~Shader()
{

}

bool Shader::init(GLint* p_pProgram)
{
	m_pProgram = p_pProgram;
	if(m_pProgram == NULL)
		return false;
	return true;
}

bool Shader::createAndCompile(ShaderType p_shaderType, const char* p_pFilecAddress)
{
	std::string shaderCode;
	std::ifstream VertexShaderStream(p_pFilecAddress,std::ios::in);
	if(VertexShaderStream.is_open())
	{
		std::string Line = "";
		while(getline(VertexShaderStream, Line))
			shaderCode += "\n" + Line;
		VertexShaderStream.close();
	}

	switch (p_shaderType)
	{
	case VERTEX_SHADER:
		break;
	case FRAGMENT_SHADER:
		break;
	case GEOMETRY_SHADER:
		break;
	default:
		break;
	}

	return true;
}
