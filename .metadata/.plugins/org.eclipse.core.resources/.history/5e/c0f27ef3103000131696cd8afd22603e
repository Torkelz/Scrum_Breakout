#include "Header/LinHid.h"

HID::HID(GLFWwindow* p_pHwnd)
{
	m_pHwnd = p_pHwnd;

	m_pObservable	= new HIDObservable();
	m_pMouse		= new Mouse(p_pHwnd);
	m_pKeyboard 	= new Keyboard(p_pHwnd);
}

HID::~HID()
{
	m_pObservable->~HIDObservable();
	m_pObservable = NULL;

	m_pMouse->~Mouse();
	m_pMouse = NULL;
	m_pKeyboard->~Keyboard();
	m_pKeyboard = NULL;
}

bool HID::initDevices()
{
	int fd;
	struct	uinput_user_dev uidev;
	struct	input_event		ev;

	fd = open("/proc/bus/input/devices", O_NONBLOCK);

	ioctl(fd, UI_SET_EVBIT, EV_KEY);
	int err = errno;
	if(errno < 0)
		return false;

	memset(&uidev.name, 0, sizeof(uidev));
	snprintf(uidev.name, UINPUT_MAX_NAME_SIZE, "CHICONY HP Basic USB Keyboard");

	uidev.id.bustype = BUS_USB;
	uidev.id.vendor = 0x1;
	uidev.id.product = 24;
	uidev.id.version = 0110;

	if(write(fd, &uidev, sizeof(uidev)) < 0)
		return false;

	if(ioctl(fd, UI_DEV_CREATE) < 0)
		return false;

	while(read(fd, &ev, sizeof(input_event)) > 0)
	{
		if(ev.type == EV_KEY)
		{
			if(ev.value == KEY_PRESS)
			{
				unsigned short value = ev.code;
			}
		}
	}


	return true;
}

void HID::update(int p_action, int p_key)
{
	switch(p_action)
	{
	case GLFW_PRESS:
			m_pObservable->broadcastKeyPress( m_pKeyboard->KeyDown(p_key) );
		break;
	}
}

HIDObservable* HID::getObservable()
{
	return m_pObservable;
}
